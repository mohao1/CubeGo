// Code generated by xgen. DO NOT EDIT.
// Code generated by xgen. DO NOT EDIT.
// Code generated by xgen. DO NOT EDIT.

package {{.QueryPackage}}
import (
	"common-toolkits-v1/XGen/GormXGens/config"
	"{{.ModelLinkPath}}"
    "context"
    "database/sql"
	"gorm.io/gorm"
)

type {{.QueryName}} struct {
	db        gorm.DB
	tableName string
}

func newQuery(db *gorm.DB) *{{.QueryName}} {
	model := {{.ModelPackage}}.{{.ModelName}}{}
	tableName := model.TableName()
	tableDB := db.Table(tableName)
	return &{{.QueryName}}{
		db:        *tableDB,
		tableName: tableName,
	}
}

// GetTableName table名称
func (u {{.QueryName}}) GetTableName() string {
	return u.tableName
}

// 获取DB操作对象
func (u {{.QueryName}}) Get{{.QueryName}}DB() gorm.DB {
	return u.db
}

// GetList 获取列表
func (u {{.QueryName}}) GetList(ctx context.Context,opts ...config.DBFunc) ([]*{{.ModelPackage}}.{{.ModelName}}, error) {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return nil, err
		}
	}
	var models []*{{.ModelPackage}}.{{.ModelName}}
	db.Find(&models)
	return models, nil
}

// GetRow 获取Row的数据
func (u {{.QueryName}}) GetRow(ctx context.Context, opts ...config.DBFunc) (*sql.Row, error) {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return nil, err
		}
	}
	row := db.Row()
	return row, nil
}

// GetRows 获取Rows的数据
func (u {{.QueryName}}) GetRows(ctx context.Context, opts ...config.DBFunc) (*sql.Rows, error) {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return nil, err
		}
	}
	return db.Rows()
}

{{if .PrimaryKey}}
// GetUserByID 主键查询
func (u {{.QueryName}}) GetUserBy{{.PrimaryKey.Name}}(ctx context.Context, {{.PrimaryKey.Name}} {{.PrimaryKey.Type}}, opts ...config.DBFunc) (*{{.ModelPackage}}.{{.ModelName}}, error) {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return nil, err
		}
	}
	db.Where("{{.PrimaryKey.Column}} = ?", {{.PrimaryKey.Name}})
	var models *{{.ModelPackage}}.{{.ModelName}}
	db.First(&models)
	return models, nil
}

// DeleteByID 主键删除数据
func (u {{.QueryName}}) DeleteBy{{.PrimaryKey.Name}}(ctx context.Context, {{.PrimaryKey.Name}} {{.PrimaryKey.Type}}, opts ...config.DBFunc) error {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return err
		}
	}
	tx := db.Delete(&{{.ModelPackage}}.{{.ModelName}}{
		{{.PrimaryKey.Name}}: {{.PrimaryKey.Name}},
	})
	if tx.Error != nil {
		return tx.Error
	}
	return nil
}

// UpdateByID 主键修改数据
func (u {{.QueryName}}) UpdateBy{{.PrimaryKey.Name}}(ctx context.Context, {{.PrimaryKey.Name}} {{.PrimaryKey.Type}}, model *any, opts ...config.DBFunc) error {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return err
		}
	}
	db.Where("{{.PrimaryKey.Column}} = ?", {{.PrimaryKey.Name}})
	result := db.Save(model)
	if err := result.Error; err != nil {
		return err
	}
	return nil
}
{{end}}

{{range .IndexList}}

// GetUserByName 索引查询
func (u {{$.QueryName}}) GetUserBy{{.Name}}(ctx context.Context, {{.Name}} {{.Type}}, opts ...config.DBFunc) (*{{$.ModelPackage}}.{{$.ModelName}}, error) {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return nil, err
		}
	}
	db.Where("{{.Column}} = ?", {{.Name}})
	var models *{{$.ModelPackage}}.{{$.ModelName}}
	db.First(&models)
	return models, nil
}

// DeleteByName 索引删除数据
func (u {{$.QueryName}}) DeleteBy{{.Name}}(ctx context.Context, {{.Name}} {{.Type}}, opts ...config.DBFunc) error {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return err
		}
	}
	tx := db.Delete(&entity.User{
		{{.Name}}: {{.Name}},
	})
	if tx.Error != nil {
		return tx.Error
	}
	return nil
}

// UpdateByName 主键修改数据
func (u {{$.QueryName}}) UpdateBy{{.Name}}(ctx context.Context, {{.Name}} {{.Type}}, model *any, opts ...config.DBFunc) error {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return err
		}
	}
	db.Where("{{.Column}} = ?", {{.Name}})
	result := db.Save(model)
	if err := result.Error; err != nil {
		return err
	}
	return nil
}

// GetListByName 获取批量数据
func (u {{$.QueryName}}) GetListBy{{.Name}}(ctx context.Context, {{.Name}} {{.Type}}, opts ...config.DBFunc) ([]*{{$.ModelPackage}}.{{$.ModelName}}, error) {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return nil, err
		}
	}
	db.Where("{{.Column}} = ?", {{.Name}})
	var models []*{{$.ModelPackage}}.{{$.ModelName}}
	db.Find(&models)
	return models, nil
}

// GetRowByName 获取Row的数据
func (u {{$.QueryName}}) GetRowBy{{.Name}}(ctx context.Context, {{.Name}} {{.Type}}, opts ...config.DBFunc) (*sql.Row, error) {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return nil, err
		}
	}
	db.Where("{{.Column}} = ?", {{.Name}})
	row := db.Row()
	return row, nil
}

// GetRowsByName 获取Rows的数据
func (u {{$.QueryName}}) GetRowsBy{{.Name}}(ctx context.Context, {{.Name}} {{.Type}}, opts ...config.DBFunc) (*sql.Rows, error) {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return nil, err
		}
	}
	db.Where("{{.Column}} = ?", {{.Name}})
	return db.Rows()
}

// GetListCountByName Count数量统计
func (u {{$.QueryName}}) GetListCountBy{{.Name}}(ctx context.Context, {{.Name}} {{.Type}}, opts ...config.DBFunc) (int64, error) {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return 0, err
		}
	}
	db.Where("{{.Column}} = ?", {{.Name}})
	var count int64
	db.Count(&count)
	if db.Error != nil {
		return 0, db.Error
	}
	return count, nil
}

{{end}}

// Create 创建数据
func (u {{.QueryName}}) Create(ctx context.Context, model *any) error {
	db := u.db.WithContext(ctx)
	result := db.Create(model)
	if err := result.Error; err != nil {
		return err
	}
	return nil
}

// Update 修改数据
func (u {{.QueryName}}) Update(ctx context.Context, model *any, opts ...config.DBFunc) error {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return err
		}
	}
	result := db.Updates(model)
	if err := result.Error; err != nil {
		return err
	}
	return nil
}

// GetListCount Count数量统计
func (u {{.QueryName}}) GetListCount(ctx context.Context, opts ...config.DBFunc) (int64, error) {
	db := u.db.WithContext(ctx)
	for _, f := range opts {
		err := f(db)
		if err != nil {
			return 0, err
		}
	}
	var count int64
	db.Count(&count)
	if db.Error != nil {
		return 0, db.Error
	}
	return count, nil
}